[{"C:\\Users\\Cirruslabs\\Downloads\\clconnect\\clconnect\\client\\src\\index.js":"1","C:\\Users\\Cirruslabs\\Downloads\\clconnect\\clconnect\\client\\src\\reportWebVitals.js":"2","C:\\Users\\Cirruslabs\\Downloads\\clconnect\\clconnect\\client\\src\\App.js":"3","C:\\Users\\Cirruslabs\\Downloads\\clconnect\\clconnect\\client\\src\\services\\httpService.js":"4","C:\\Users\\Cirruslabs\\Downloads\\clconnect\\clconnect\\client\\src\\components\\createpost.jsx":"5","C:\\Users\\Cirruslabs\\Downloads\\clconnect\\clconnect\\client\\src\\components\\logout.jsx":"6","C:\\Users\\Cirruslabs\\Downloads\\clconnect\\clconnect\\client\\src\\components\\navbar.jsx":"7","C:\\Users\\Cirruslabs\\Downloads\\clconnect\\clconnect\\client\\src\\components\\not-found.jsx":"8","C:\\Users\\Cirruslabs\\Downloads\\clconnect\\clconnect\\client\\src\\components\\dashboard.jsx":"9","C:\\Users\\Cirruslabs\\Downloads\\clconnect\\clconnect\\client\\src\\components\\register.jsx":"10","C:\\Users\\Cirruslabs\\Downloads\\clconnect\\clconnect\\client\\src\\components\\log.jsx":"11","C:\\Users\\Cirruslabs\\Downloads\\clconnect\\clconnect\\client\\src\\components\\PostPage.jsx":"12","C:\\Users\\Cirruslabs\\Downloads\\clconnect\\clconnect\\client\\src\\components\\Contactform.jsx":"13","C:\\Users\\Cirruslabs\\Downloads\\clconnect\\clconnect\\client\\src\\components\\common\\jumbotron.jsx":"14","C:\\Users\\Cirruslabs\\Downloads\\clconnect\\clconnect\\client\\src\\components\\common\\protectedRoute.jsx":"15","C:\\Users\\Cirruslabs\\Downloads\\clconnect\\clconnect\\client\\src\\services\\postCreateService.js":"16","C:\\Users\\Cirruslabs\\Downloads\\clconnect\\clconnect\\client\\src\\services\\userService.js":"17","C:\\Users\\Cirruslabs\\Downloads\\clconnect\\clconnect\\client\\src\\services\\authService.js":"18","C:\\Users\\Cirruslabs\\Downloads\\clconnect\\clconnect\\client\\src\\utils\\paginate.js":"19","C:\\Users\\Cirruslabs\\Downloads\\clconnect\\clconnect\\client\\src\\components\\common\\input.jsx":"20","C:\\Users\\Cirruslabs\\Downloads\\clconnect\\clconnect\\client\\src\\components\\common\\form.jsx":"21","C:\\Users\\Cirruslabs\\Downloads\\clconnect\\clconnect\\client\\src\\components\\listgroup.jsx":"22","C:\\Users\\Cirruslabs\\Downloads\\clconnect\\clconnect\\client\\src\\components\\posts.jsx":"23","C:\\Users\\Cirruslabs\\Downloads\\clconnect\\clconnect\\client\\src\\components\\common\\pagination.jsx":"24","C:\\Users\\Cirruslabs\\Downloads\\clconnect\\clconnect\\client\\src\\components\\createReply.jsx":"25","C:\\Users\\Cirruslabs\\Downloads\\clconnect\\clconnect\\client\\src\\services\\replyCreateService.js":"26","C:\\Users\\Cirruslabs\\Downloads\\clconnect\\clconnect\\client\\src\\components\\profile.jsx":"27","C:\\Users\\Cirruslabs\\Downloads\\clconnect\\clconnect\\client\\src\\components\\upload.js":"28"},{"size":956,"mtime":1655964348248,"results":"29","hashOfConfig":"30"},{"size":404,"mtime":1659437650345,"results":"31","hashOfConfig":"30"},{"size":2542,"mtime":1659422204658,"results":"32","hashOfConfig":"30"},{"size":641,"mtime":1659437303152,"results":"33","hashOfConfig":"30"},{"size":4772,"mtime":1659355139439,"results":"34","hashOfConfig":"30"},{"size":370,"mtime":1659957034202,"results":"35","hashOfConfig":"30"},{"size":4502,"mtime":1659427316593,"results":"36","hashOfConfig":"30"},{"size":743,"mtime":1659427537743,"results":"37","hashOfConfig":"30"},{"size":6602,"mtime":1660036114318,"results":"38","hashOfConfig":"30"},{"size":4490,"mtime":1659957222414,"results":"39","hashOfConfig":"30"},{"size":3623,"mtime":1659957347684,"results":"40","hashOfConfig":"30"},{"size":5975,"mtime":1659432067124,"results":"41","hashOfConfig":"30"},{"size":9631,"mtime":1659938215190,"results":"42","hashOfConfig":"30"},{"size":675,"mtime":1659957226214,"results":"43","hashOfConfig":"30"},{"size":612,"mtime":1659335814953,"results":"44","hashOfConfig":"30"},{"size":280,"mtime":1659437439810,"results":"45","hashOfConfig":"30"},{"size":315,"mtime":1659437437838,"results":"46","hashOfConfig":"30"},{"size":257,"mtime":1659437256841,"results":"47","hashOfConfig":"30"},{"size":229,"mtime":1659437536079,"results":"48","hashOfConfig":"30"},{"size":518,"mtime":1659335496437,"results":"49","hashOfConfig":"30"},{"size":1601,"mtime":1659335378640,"results":"50","hashOfConfig":"30"},{"size":1275,"mtime":1659956836171,"results":"51","hashOfConfig":"30"},{"size":1785,"mtime":1660018388292,"results":"52","hashOfConfig":"30"},{"size":1048,"mtime":1659335708946,"results":"53","hashOfConfig":"30"},{"size":2370,"mtime":1659423593424,"results":"54","hashOfConfig":"30"},{"size":273,"mtime":1659437439012,"results":"55","hashOfConfig":"30"},{"size":4907,"mtime":1659957459310,"results":"56","hashOfConfig":"30"},{"size":2307,"mtime":1659962780469,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"qlh3ax",{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"60"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"60"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"60"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"60"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"60"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"60"},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"60"},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"60"},"C:\\Users\\Cirruslabs\\Downloads\\clconnect\\clconnect\\client\\src\\index.js",[],["124","125"],"C:\\Users\\Cirruslabs\\Downloads\\clconnect\\clconnect\\client\\src\\reportWebVitals.js",[],"C:\\Users\\Cirruslabs\\Downloads\\clconnect\\clconnect\\client\\src\\App.js",[],"C:\\Users\\Cirruslabs\\Downloads\\clconnect\\clconnect\\client\\src\\services\\httpService.js",["126"],"import axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n//Error catching if any issue with backend calls\naxios.defaults.headers.common[\"x-auth-token\"] = localStorage.getItem(\"token\");\n\naxios.interceptors.response.use(null, (error) => {\n  const expectedError =\n    error.response &&\n    error.response.status >= 400 &&\n    error.response.status < 500;\n\n  if (!expectedError) {\n    toast(\"An unexpected error occured!\");\n  }\n  console.log(error);\n  return Promise.reject(error);\n});\n\nexport default {\n  get: axios.get,\n  post: axios.post,\n  put: axios.put,\n  delete: axios.delete,\n};\n","C:\\Users\\Cirruslabs\\Downloads\\clconnect\\clconnect\\client\\src\\components\\createpost.jsx",[],"C:\\Users\\Cirruslabs\\Downloads\\clconnect\\clconnect\\client\\src\\components\\logout.jsx",["127"],"import React from \"react\"; \nimport {Component } from \"react\";\n// class for logout functionality, disconnects token and redirect to dashboard\nclass Logout extends Component {\n  componentDidMount() {\n    localStorage.removeItem(\"token\");\n    //redirect to daschboard page\n    window.location = \"/dashboard\";\n  }\n  render() {\n    return null;\n  }\n}\n\nexport default Logout;\n","C:\\Users\\Cirruslabs\\Downloads\\clconnect\\clconnect\\client\\src\\components\\navbar.jsx",[],"C:\\Users\\Cirruslabs\\Downloads\\clconnect\\clconnect\\client\\src\\components\\not-found.jsx",[],"C:\\Users\\Cirruslabs\\Downloads\\clconnect\\clconnect\\client\\src\\components\\dashboard.jsx",["128"],"import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Pagination from \"./common/pagination\";\nimport ListGroup from \"./listgroup\";\nimport Posts from \"./posts\";\nimport { paginate } from \"../utils/paginate\";\nimport config from \"../config.json\";\nimport http from \"../services/httpService\";\nimport \"../components/dashboard.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faMessage, faMagnifyingGlass } from \"@fortawesome/free-solid-svg-icons\";\n\n// class for dashboard page\nclass Dashboard extends Component {\n  // state variables for dashboard \n  state = {\n    allposts: [],\n    currentPage: 1,\n    pageSize: 4,\n    tags: [],\n    selectedTag: { _id: \"1\", name: \"All Posts\" },\n    searchWord: '',\n  };\n\n  //Component mount for all posts and side-tags\n  async componentDidMount() {\n    //backend call for getting all posts and related tags\n    const { data: allposts } = await http.get(config.postEndPoint);\n    const { data: tags } = await http.get(config.tagsEndPoint);\n\n    this.setState({\n      allposts: [...allposts],\n      tags: [\n        {\n          _id: \"1\",\n          name: \"All Posts\",\n        },\n        ...tags,\n      ],\n    \n    });\n  }\n\n  //function for pagination \n  handlePageChange = (page) => {\n    this.setState({ currentPage: page });\n  };\n\n  //function for handling tag selection.\n  handleTagSelect = (tag) => {\n    this.setState({ selectedTag: tag, currentPage: 1, searchWord:'' });\n  };\n\n  //function for filtering of posts based on selected tag(categories) \n  getPosts() {\n    const { allposts, selectedTag } = this.state;\n    const filtered = [];\n    for (let i in allposts) \n    {\n      const post = allposts[i];\n      const { tags } = post;\n      console.log(post);\n      for (let j in tags) {\n        if (tags[j].name === selectedTag.name) \n        {\n          filtered.push(post);\n          break;\n        }\n      }\n    }\n    console.log(filtered);\n    //returning latest post first\n    return filtered.reverse();\n  }  \n\n  //function to store value of the search bar\n  handleFilter = (event) => \n  {\n      const searchWord = event.target.value;\n      this.setState({ searchWord: searchWord.toLowerCase()});\n  };\n\n  //function for filtering of posts based on Search bar value \n  getPosts1 = () => \n  {\n        const { allposts, searchWord} = this.state;\n        console.log(searchWord)\n        const filtered = [];\n        //Splitting words in the posts for search\n        for (let i in allposts) \n        {\n          const post = allposts[i];\n          const { title } = post;\n          const {description} = post;\n          const {author} = post;\n          //splitting using regex\n          const myarr = title\n          const myarr1 = description\n          const myarr2 = author.name\n          // searching for word in title of posts and appending to list\n          if (myarr.toLowerCase().includes(searchWord)) \n          //remove duplication in listing of post\n          {  if(!(filtered.includes(post)))\n            {    console.log(\"1\")\n                filtered.push(post);\n              \n            }   \n          }\n          // searching for word in description of posts and appending to list\n          if (myarr1.toLowerCase().includes(searchWord)) \n          console.log(\"2\");\n          {//remove duplication in listing of post\n            if(!(filtered.includes(post)))\n            {    \n              filtered.push(post);\n            }    \n          }\n          // searching for word in names of authors for posts and appending to list\n          if (myarr2.toLowerCase().includes(searchWord)) \n          {//remove duplication in listing of post\n            \n            if(!(filtered.includes(post)))\n            {    \n              filtered.push(post);\n            }    \n          }\n        }\n      //returning latest post first\n      return filtered.reverse();\n  };\n  \n  //rendering the functions and values from class dashboard  \n  render() \n  {\n      const { user } = this.props;\n      const { allposts, pageSize, currentPage, tags, selectedTag, searchWord} = this.state;\n      //filtered is list variable having all the posts based on selected tag or search bar.\n      const filtered = selectedTag._id === \"1\" ? (searchWord === '' ? allposts.reverse() : this.getPosts1(searchWord) ) : (searchWord === '' ? this.getPosts() : this.getPosts1(searchWord));\n      const posts = paginate(filtered, currentPage, pageSize);\n      //If no posts found then display :\n      if (allposts.length === 0)\n        return <p>❕There are no posts in CL Connects !!!</p>;\n      else  \n      //If posts found then\n      return (\n        <div>\n           <React.Fragment>\n              <div className=\"container\">\n                <div className=\"row\">\n                  <div className=\"col\">\n                    <div className=\"d-flex w-100 justify-content-between m-3\">\n                        Showing {filtered.length} posts.\n                        { user && (\n                          <Link to=\"/new-post\">\n                            <button                    \n                              type=\"button\"\n                              class=\"btn btn-success\"\n                              style={{ marginBottom: 20, marginRight:50 }}\n                            >\n                              New Post  <FontAwesomeIcon icon={faMessage} />\n                            </button>\n                          </Link>\n                        )}\n                    </div>\n                 </div>\n              </div>\n              <div className=\"row\">\n                <div className=\"col-9\">\n                  <Posts posts={posts} />\n                </div>\n                <div className=\"col-3\">\n                  <label htmlFor=\"Search\"> <FontAwesomeIcon icon={faMagnifyingGlass} /> &nbsp; Search</label>\n                  <input\n                  type=\"text\"\n                  value={this.state.value}\n                  onChange={this.handleFilter}\n                  />\n                  <br/>\n                  <br/>\n                 \n                  <ListGroup\n                    items={tags}\n                    selectedTag={this.state.selectedTag}\n                    onTagSelect={this.handleTagSelect}\n                  />\n                </div>\n                <Pagination\n                  itemCount={filtered.length}\n                  pageSize={pageSize}\n                  currentPage={currentPage}\n                  onPageChange={this.handlePageChange}\n                />\n              </div>\n            </div>\n          </React.Fragment>\n        </div>\n    );\n  }\n}\nexport default Dashboard;\n","C:\\Users\\Cirruslabs\\Downloads\\clconnect\\clconnect\\client\\src\\components\\register.jsx",[],"C:\\Users\\Cirruslabs\\Downloads\\clconnect\\clconnect\\client\\src\\components\\log.jsx",[],"C:\\Users\\Cirruslabs\\Downloads\\clconnect\\clconnect\\client\\src\\components\\PostPage.jsx",["129","130","131"],"import React, { Component } from \"react\";\nimport Moment from \"react-moment\";\nimport \"moment-timezone\";\nimport { PersonCircle, HandThumbsUpFill, } from \"react-bootstrap-icons\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport http from \"../services/httpService\";\nimport { postEndPoint, repliesEndPoint } from \"../config.json\";\nimport PostReply from \"./createReply\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faClockRotateLeft, faFlag, } from \"@fortawesome/free-solid-svg-icons\";\n\n//Class for Postpage when post link is clicked\nclass PostPage extends Component \n{\n  //state variables of the particular post\n  state = \n  {\n    post: {\n      description: \"\",\n      title: \"\",\n      tags: [],\n      author: [],\n      upvotes: [],\n      views: 0,\n    },\n    replies: [],\n  };\n  //call to backend for retrieving data\n  async componentDidMount() \n  {\n    const id = this.props.match.params.id;\n    const { data: post } = await http.get(postEndPoint + \"/\" + id);\n    const { data: replies } = await http.get(repliesEndPoint + \"/\" + id);\n    this.setState({ post: post, replies: replies });\n  }\n  //function to check the no. of likes to post \n  checkLike() \n  {\n    const { user } = this.props;\n    const { post } = this.state;\n    //console.log(user);\n    if (user && post.upvotes && post.upvotes.includes(user._id)) return true;\n    else return false;\n  }\n  //function to check the no. of likes to replies \n  checkReplyLike(id) \n  {\n    const { replies } = this.state;\n    const { user } = this.props;\n    if(user) \n    {\n      for (let i in replies) \n      {\n        if (replies[i]._id === id) \n        {\n          if (replies[i].upvotes.includes(user._id)) return true;\n        }\n      }\n    }\n    return false;\n  }\n  //function to handle likes to posts\n  handleUpvote = async () => \n  {\n    const id = this.props.match.params.id;\n    const { data: post } = await http.get(postEndPoint + \"/\" + id);\n    try {\n      const { data: post } = await http.put(\n        postEndPoint + \"like/\" + this.props.match.params.id,\n        {}\n      );\n      console.log(post);\n      this.setState({ post: post[0] });\n    } catch (ex) {\n      if (ex.response && ex.response.status === 400) {\n        toast.error(\"You can't upvote your own post!\");\n      }\n    }\n  };\n  \n  //function to handle likes to reply \n  handleReplyUpvote = async (id) => \n  {\n    try {\n      const replies_old = [...this.state.replies];\n      const reply_updated = await http.put(repliesEndPoint + \"like/\" + id, {});\n      const { data: replies } = await http.get(\n        repliesEndPoint + \"/\" + this.props.match.params.id\n      );\n      console.log(replies);\n      this.setState({ replies: replies });\n    } catch (ex) {\n      if (ex.response && ex.response.status === 400) {\n        toast.error(\"You can't upvote your own reply!\");\n      }\n    }\n  };\n\n  render() {\n    const { post, replies } = this.state;\n    const { user } = this.props;\n    return (\n      <div>\n        <ToastContainer />\n        <div className=\"container col-lg-6 shadow-lg p-3 mt-5 bg-body rounded\">\n          <h2><FontAwesomeIcon icon={faFlag}/> {post.title}</h2>\n          <p className=\"mt-4\" style={{ color: \"#505050\" }}>\n            {post.description}\n          </p>\n          <div className=\"mt-1\">\n            Related Topics:\n            {post.tags &&\n              post.tags.map((tag) => (\n                <span className=\"badge badge-success m-1 p-2\">{tag.name}</span>\n            ))}\n            <div className=\"d-flex w-100 justify-content-between mt-3 mb-3\">\n              <button\n                disabled={!user}\n                className={\n                  this.checkLike()\n                    ? \"btn btn-primary\"\n                    : \"btn btn-outline-primary\"\n                }\n                onClick={this.handleUpvote}\n              >\n                <HandThumbsUpFill className=\"mr-2\" />\n                {(post.upvotes && post.upvotes.length) || 0}\n              </button>\n              <p>{post.views} Views</p>\n            </div>\n            <div class=\"d-flex w-100 justify-content-between\" style={{ color: \"#505050\" }}>\n              <div>\n                <PersonCircle size={30} className=\"mr-2\" />\n                Posted by {(post.author && post.author.username) || 0}\n              </div>\n              <p class=\"mb-1\">\n              <FontAwesomeIcon icon={faClockRotateLeft}/> <Moment fromNow>{post.time}</Moment>\n              </p>\n            </div>\n          </div>\n        </div>\n        {user && <PostReply id={this.props.match.params.id} />}\n        <div className=\"container col-lg-6 shadow-lg p-3 mt-5 bg-body rounded\">\n          Showing {replies.length} replies\n        </div>\n        <div>\n          {replies &&\n            replies.map((reply) => (\n              <div className=\"container col-lg-6 shadow-lg p-3 mt-3 bg-body rounded\">\n                <div className=\"ml-4\">\n                  <PersonCircle size={30} className=\"mr-3\" />\n                  Posted by {reply.author.username}\n                </div>\n                <div className=\"m-4\">{reply.comment}</div>\n                <div className=\"d-flex w-100 justify-content-between mt-3 mb-3\">\n                  <button\n                    className={\n                      this.checkReplyLike(reply._id)\n                        ? \"btn btn-primary\"\n                        : \"btn btn-outline-primary\"\n                    }\n                    disabled={!user}\n                    onClick={() => {this.handleReplyUpvote(reply._id);}}\n                  >\n                    <HandThumbsUpFill className=\"mr-2\" />\n                    {reply.upvotes.length}\n                  </button>\n                  <p class=\"mb-1\">\n                    <Moment fromNow style={{ color: \"#505050\" }}>\n                      {reply.time}\n                    </Moment>\n                  </p>\n                </div>\n              </div>\n           ))\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default PostPage;\n","C:\\Users\\Cirruslabs\\Downloads\\clconnect\\clconnect\\client\\src\\components\\Contactform.jsx",["132","133","134"],"import React from \"react\";\r\nimport axios from 'axios';\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport '../components/ContactForm.css';\r\n//import for icons \r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {faEnvelope, faCheck, faReply } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass ContactForm extends React.Component {  \r\n\r\n  //this must be bound so that event handler function methods correctly update the overall component state.\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        name: '',\r\n        nameError: false,\r\n        subject: '',\r\n        contact: '',\r\n        email: '',\r\n        emailError: false,\r\n        emailError2: false,\r\n        message: '',\r\n        messageError: false,\r\n        formValid: false\r\n      };\r\n\r\n      //binding all the function to class using constructor so they can be used\r\n      this.handleBlur   = this.handleBlur.bind(this);\r\n      this.handleChange = this.handleChange.bind(this);\r\n      this.handleSubmit = this.handleSubmit.bind(this);\r\n      this.handleBlur1 = this.handleBlur1.bind(this);   \r\n  }\r\n    //Validating email for cirruslabs.io useing regex\r\n    isValidEmail(email) {\r\n      return /^[_A-Za-z0-9-\\\\+]+(\\\\.[_A-Za-z0-9-]+)*@cirruslabs.io$/.test(email);\r\n    }\r\n    \r\n    \r\n    \r\n    //Focusing on Name field\r\n    handleBlur(e) {\r\n     \r\n      const name = e.target.name; \r\n      const value = e.target.value;\r\n  \r\n      this.setState({ [name]: value  });\r\n  \r\n      if (value.length <= 0 && (name === 'name')) {\r\n        this.setState({ nameError: true });\r\n        toast.error('Name Error')        \r\n      } \r\n      else {\r\n        this.setState({ nameError: false });\r\n      }\r\n    }\r\n\r\n     //Focusing on Email field\r\n    handleBlur1(e) {\r\n     \r\n      const name1 = e.target.name; \r\n      const value1 = e.target.value;\r\n  \r\n      this.setState({ [name1]: value1  });\r\n  \r\n      \r\n  \r\n      if (value1.length <= 0 && (name1 === 'email')) {\r\n          this.setState({ emailError: true });\r\n          this.setState({ emailError2: false });\r\n          toast.error('Email Error')\r\n      } \r\n      else {\r\n          this.setState({ emailError: false });\r\n          if(this.isValidEmail(value1)) {\r\n            this.setState({ emailError2: false });  \r\n          } \r\n          else \r\n          {\r\n          this.setState({ emailError2: true });  \r\n          toast.error('Invalid Email')\r\n          }\r\n        } \r\n  \r\n    }\r\n    \r\n    //triggered only when we change and focus out of the text input.\r\n    handleChange(e) \r\n    {\r\n      this.setState({ [e.target.name]: e.target.value  });\r\n    }\r\n  \r\n    //submits all the field values of the form and gets the current value of state. \r\n    //It adds it to the array of webhooks and performs validation calls . \r\n    handleSubmit(e) \r\n    {\r\n      const { name, email, message, nameError, emailError, emailError2, messageError, subject, contact } = this.state;\r\n      \r\n      this.setState({ nameError: name ? false : true });\r\n      this.setState({ messageError: message ? false : true });\r\n      this.setState({ emailError: email ? false : true });\r\n      if (email && !emailError) \r\n      { this.setState({ emailError2: this.isValidEmail(email) ? false : true });  }\r\n      \r\n  \r\n      if (name && email && message && !nameError && !emailError && !emailError2 && !messageError) \r\n      {\r\n        this.setState({ formValid: true }); \r\n\r\n          var toemail=\"pranjal@cirruslabs.io\"\r\n          var eemail=\"pranjal.kul10@gmail.com\"\r\n          \r\n          let data = {\r\n              name,\r\n              email,\r\n              subject,\r\n              contact,\r\n              message,\r\n              toemail,\r\n              eemail\r\n              \r\n          }\r\n      \r\n          //sending the contact form details to admin via mail   \r\n          axios.post(\"http://localhost:4000/mailer\",data)\r\n          .then(res=>{\r\n              this.setState({\r\n                  sent:true,\r\n                },this.resetForm())\r\n            \r\n            }).catch(()=>{\r\n              console.log('msg sent successfully');\r\n              })\r\n            \r\n      } \r\n      else \r\n      {\r\n        this.setState({ formValid: false });\r\n      }\r\n\r\n      e.preventDefault();\r\n  }  \r\n    \r\n\r\n  //rendering event handler and submit functions \r\n    render() {  \r\n      \r\n      const { name, email, message, nameError, emailError, emailError2, messageError, formValid } = this.state;\r\n  \r\n      if(!formValid) {\r\n        \r\n        return (\r\n       \r\n              <div>\r\n                \r\n                <ToastContainer/>\r\n                <div className=\"body\">\r\n                  <div className=\"contain4\" style={{padding: \"10px 30px 10px 30px\", height: \"fit-content\", marginTop:\"100px\"}} >\r\n                    <div className=\"card3\" style={{padding: \"10px 30px 10px 30px\",height: \"fit-content\"}}>\r\n                      <div className=\"hello2\"style={{textAlign:\"center\"}} ><h2 style={{marginLeft:\"-120px\"}} > <FontAwesomeIcon icon={faEnvelope} /> Contact Form</h2>    </div>\r\n                        <div className=\"r1\"  >\r\n                          <form action=\"/\" onSubmit={(e) => this.handleSubmit(e)} encType=\"multipart/form-data\" autoComplete=\"on\">\r\n                            \r\n                            <div className=\"form-group1\" style={{margin: \"5px 30px 5px 30px\", width:\"90%\"}}>\r\n                              <label className=\"lab\" >Your name<span className=\"text-danger\">*</span></label>\r\n                              <input name=\"name\"  type=\"text\" className=\"form-control\" placeholder=\"Name\" value={this.state.name} onChange={this.handleChange} onBlur={this.handleBlur} />\r\n                              { nameError\r\n                                ? <div className=\"alert \">Name is a required field.</div>\r\n                                : ''\r\n                              }\r\n                            </div>\r\n\r\n                            <div className=\"form-group1\" style={{margin: \"5px 30px 5px 30px\", width:\"90%\"}}>\r\n                              <label className=\"lab\" >Your email<span className=\"text-danger\">*</span></label>\r\n                              <input name=\"email\"  type=\"email\" className=\"form-control\" placeholder=\"Email\" value={this.state.email} onChange={this.handleChange} onBlur={this.handleBlur1} />\r\n                              { emailError\r\n                                ? <div className=\"alert \">Email is a required field.</div>\r\n                                : ''\r\n                              }\r\n                              { emailError2\r\n                                ? <div className=\"alert \">Email invalid.</div>\r\n                                : ''\r\n                              }\r\n                            </div>\r\n\r\n                            <div className=\"form-group1\" style={{margin: \"5px 30px 5px 30px\", width:\"90%\"}}>\r\n                              <label className=\"lab\">Subject<span className=\"text-danger\"></span></label>\r\n                              <input name=\"subject\"  type=\"text\" className=\"form-control\" placeholder=\"Subject\" onChange={this.handleChange} value={this.state.subject}  />\r\n                            </div>\r\n\r\n                            <div className=\"form-group1\" style={{margin: \"5px 30px 5px 30px\", width:\"90%\"}}>\r\n                              <label className=\"lab\" >Your contact number (Optional)</label>\r\n                              <input name=\"contact\"  type=\"text\" className=\"form-control\" placeholder=\"Contact\" onChange={this.handleChange} value={this.state.contact}  />\r\n                            </div>\r\n\r\n                            <div className=\"form-group1\" style={{margin: \"5px 30px 5px 30px\", width:\"90%\"}}>\r\n                              <label className=\"lab\" >Let us know how can we help<span className=\"text-danger\">*</span></label>\r\n                              <textarea name=\"message\" style={{borderRadius: \"10px\", border:\"1px solid rgb(43, 40, 40)\" }}  type=\"text\" className=\"form-control\" placeholder=\"Message\" value={this.state.message} onChange={this.handleChange} onBlur={this.handleBlur} />\r\n                              { messageError\r\n                                ? <div className=\"alert \">Message is a required field.</div>\r\n                                : ''\r\n                              }\r\n                            </div>\r\n                    \r\n                            <div className=\"text-center\">\r\n                              <button className=\"btn btn-primary m-3\">\r\n                                <FontAwesomeIcon icon={faCheck} /> Submit\r\n                              </button>\r\n                            </div>                 \r\n                          </form>       \r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              );\r\n      }\r\n      else {\r\n         return (\r\n          // Display after successful submission\r\n           <div className=\"thankyou_details\">\r\n              <ToastContainer/>\r\n                <div className=\"alert alert-success mt-3\" style={{textAlign:\"center\", backgroundColor:\"#ffffff91\"}}>\r\n                  <h2>Thank you for contacting us</h2>\r\n                  <h2> We will get in touch with you. 🧑‍💻</h2>\r\n                  <Link to= \"/dashboard\" class=\"btn btn-link\">\r\n                  <h2 > <FontAwesomeIcon icon={faReply} /> &nbsp; Back to Dashboard </h2>\r\n                  </Link>\r\n                </div>\r\n          </div>\r\n          )\r\n        }\r\n    }\r\n  }  \r\n\r\n  export default ContactForm;","C:\\Users\\Cirruslabs\\Downloads\\clconnect\\clconnect\\client\\src\\components\\common\\jumbotron.jsx",[],"C:\\Users\\Cirruslabs\\Downloads\\clconnect\\clconnect\\client\\src\\components\\common\\protectedRoute.jsx",[],"C:\\Users\\Cirruslabs\\Downloads\\clconnect\\clconnect\\client\\src\\services\\postCreateService.js",[],"C:\\Users\\Cirruslabs\\Downloads\\clconnect\\clconnect\\client\\src\\services\\userService.js",[],"C:\\Users\\Cirruslabs\\Downloads\\clconnect\\clconnect\\client\\src\\services\\authService.js",[],"C:\\Users\\Cirruslabs\\Downloads\\clconnect\\clconnect\\client\\src\\utils\\paginate.js",[],"C:\\Users\\Cirruslabs\\Downloads\\clconnect\\clconnect\\client\\src\\components\\common\\input.jsx",[],"C:\\Users\\Cirruslabs\\Downloads\\clconnect\\clconnect\\client\\src\\components\\common\\form.jsx",[],"C:\\Users\\Cirruslabs\\Downloads\\clconnect\\clconnect\\client\\src\\components\\listgroup.jsx",[],"C:\\Users\\Cirruslabs\\Downloads\\clconnect\\clconnect\\client\\src\\components\\posts.jsx",[],"C:\\Users\\Cirruslabs\\Downloads\\clconnect\\clconnect\\client\\src\\components\\common\\pagination.jsx",["135"],"import React from \"react\";\nimport propTypes from \"prop-types\";\nimport _ from \"lodash\";\n\n//Page No. links component to list all post or specific category post pagewise.... \nconst Pagination = (props) => {\n  const { itemCount, pageSize, currentPage, onPageChange } = props;\n  const pagesCount = Math.ceil(itemCount / pageSize);\n  if (pagesCount === 1) return null;\n  const pages = _.range(1, pagesCount + 1);\n  return (\n    <div className=\"text-center\" >\n      <ul className=\"pagination m-4\" >\n        {pages.map((page) => (\n          <li\n            key={page}\n            className={page === currentPage ? \"page-item active\" : \"page-item\"}\n          >\n            <a className=\"page-link\" onClick={() => onPageChange(page)}>\n              {page}\n            </a>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nPagination.propTypes = {\n  itemCount: propTypes.number.isRequired,\n  pageSize: propTypes.number.isRequired,\n  currentPage: propTypes.number.isRequired,\n  onPageChange: propTypes.func.isRequired,\n};\nexport default Pagination;\n","C:\\Users\\Cirruslabs\\Downloads\\clconnect\\clconnect\\client\\src\\components\\createReply.jsx",["136"],"import React from \"react\";\nimport Joi from \"joi-browser\";\nimport {ToastContainer } from \"react-toastify\";\nimport Form from \"./common/form\";\nimport { createreply } from \"../services/replyCreateService\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faComments, faReply } from \"@fortawesome/free-solid-svg-icons\";\n\nclass PostReply extends Form {\n  // creating state variables for data and errors  for replies to post\n  state = {\n    data: {\n      comment: \"\",\n    },\n    errors: { comment: \"\" },\n  };\n  // calling replies schema for new post\n  schema = { \n    comment: Joi.string().required().min(5).label(\"Comment\"),\n  };\n // Handling Submit for replies\n  doSubmit = async () => {\n    try {\n      const { data } = this.state;\n      const { data: reply } = await createreply(data, this.props.id);\n      window.location = `/post/${this.props.id}`;\n    } catch (ex) {}\n  };\n\n  render() {\n    const { data, errors } = this.state;\n    return (\n      <React.Fragment>\n        <ToastContainer />\n          <div className=\"container col-lg-6 shadow-lg p-3 mt-5 bg-body rounded\">\n              <form onSubmit={this.handleSubmit}>\n                  <div className=\"form-group\">\n                      <label htmlFor=\"description\"> <FontAwesomeIcon icon={faComments} /> Post Reply</label>\n                      <textarea\n                        className=\"border border-primary\"\n                        style={{ height: 150 }}\n                        value={data.comment}\n                        onChange={this.handleChange}\n                        name=\"comment\"\n                        type=\"comment\"\n                        id=\"comment\"\n                        class=\"form-control\"\n                      />\n                        {errors.description && (\n                          <div className=\"alert-info\">{errors.description}</div>\n                        )}\n                      <div className=\"text-center\">\n                        <button\n                          className=\"btn btn-primary mt-4\"\n                          disabled={this.validate()}\n                        >\n                          Post Reply <FontAwesomeIcon icon={faReply} />\n                        </button>\n                      </div>\n                  </div>\n               </form>\n           </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default PostReply;\n","C:\\Users\\Cirruslabs\\Downloads\\clconnect\\clconnect\\client\\src\\services\\replyCreateService.js",[],"C:\\Users\\Cirruslabs\\Downloads\\clconnect\\clconnect\\client\\src\\components\\profile.jsx",["137","138"],"import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport '../components/profile.css';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { \r\n  faBarsProgress, \r\n  faBlog,  \r\n  faCircleCheck, \r\n  faHouseChimney, \r\n  faIdBadge, \r\n  faLaptopCode, \r\n  faPenNib, \r\n  faSquareEnvelope, \r\n  faTaxi, \r\n  faTruckPlane, \r\n  faUserTie } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n//function for profile page\r\nconst Profile = ({ user }) => {\r\n  //creating state variable for file upload\r\n  const[file, setfile] = useState('');\r\n  function rename(file)\r\n  {\r\n    const i = Number;\r\n    const addZero = (i) => \r\n    {\r\n      if (i < 10) \r\n      { i = \"0\" + i; }\r\n      return i;\r\n    };\r\n    //for renaming uploaded file to current date & time\r\n    let originalFileFrgs = file.split(\".\");\r\n    const today = new Date();\r\n    const fullYear = today.getFullYear();\r\n    const month = parseInt((today.getMonth()))+1;\r\n    const day = addZero(today.getDate());\r\n    const Hours = today.getHours();\r\n    const Mins = today.getMinutes();\r\n    let fileSuffix = [day]+\"-\"+[month]+\"-\"+[fullYear].join(\"\")+ \"-\"+[Hours]+ \"-\" +[Mins].join(\"\");\r\n    \r\n    console.log(fileSuffix);\r\n    originalFileFrgs[0] = originalFileFrgs[0]  + fileSuffix;\r\n    let filename = originalFileFrgs.join(\".\");\r\n    return (filename);\r\n  }\r\n  rename(file); \r\n  // function for user images\r\n  const imagefind = (i1) => \r\n  {\r\n    if( i1 === \"pranjal\" || i1 === \"Pranjal\" || i1 === \"PRANJAL\" || i1 === \"Pranjalk\"){ return 'pranjal' ;}\r\n    if( i1 === \"sonia\" || i1 === \"Sonia\" || i1 === \"SONIA\"){ return 'sonia';}\r\n    if (i1 === \"Chris\" || i1 === \"chris\" || i1 === \"CHRIS\"){ return 'chris' ;}\r\n    if( i1 === \"nagendra\" || i1 === \"Nagendra\" || i1 === \"NAGENDRA\"){ return 'nagendra';}\r\n    if( i1 === \"teerthana\" || i1 === \"Teerthana\" || i1 === \"TEERTHANA\"){ return 'teerthana';}\r\n    else{return 'cl111'; }\r\n  }\r\n  //function for matching icons to tags\r\n  const checkIcon = (i) => \r\n  {   \r\n    if( i=== \"All Posts\"){ return faBarsProgress ;}\r\n    if( i=== \"Housing\"){ return faHouseChimney ;}\r\n    if( i=== \"Travel\") { return faTruckPlane ;}\r\n    if( i=== \"Technical Issues\"){ return faLaptopCode;}\r\n    if( i=== \"CarPool\"){ return faTaxi; }\r\n    if( i=== \"General\"){ return faBlog; }\r\n  };\r\n\r\n  return (\r\n    <div >\r\n      {user && (\r\n        <React.Fragment>\r\n          <div className=\"body\">\r\n            <div className=\"contain4\">\r\n              <div className=\"card3\">\r\n                <div className=\"form2\">\r\n                  <div className=\"leftside1\">\r\n                    <img src={'http://localhost:3000/'+imagefind(user.name)+'.png'} alt={\" not found\"} />\r\n                    <h2>\r\n                      <FontAwesomeIcon icon={faUserTie}/> &nbsp; {user.username} <br/><hr/>\r\n                      <FontAwesomeIcon icon={faIdBadge}/> &nbsp; {user.name}  <br/><hr/>\r\n                      <FontAwesomeIcon icon={faSquareEnvelope}/>  &nbsp;   {user.email} <br/><hr/>\r\n                    </h2>\r\n                  </div>\r\n                  <div className=\"rightside1\">\r\n                    <div className=\"hello2\">\r\n                      <br/>\r\n                      <h2> <FontAwesomeIcon icon={faPenNib}/> My Interests </h2>\r\n                      <hr/>\r\n                      <label  className=\"check\"  for=\"housing\"> <FontAwesomeIcon icon={checkIcon(\"Housing\")} /> &nbsp;Housing\r\n                        <input type=\"checkbox\" id=\"housing\" name=\"housing\" />\r\n                        <span class=\"checkmark\"></span>\r\n                      </label>\r\n                      <label  className=\"check\"  for=\"travel\"> <FontAwesomeIcon icon={checkIcon(\"Travel\")} /> &nbsp;Travel\r\n                        <input type=\"checkbox\" id=\"travel\" name=\"travel\" />\r\n                        <span class=\"checkmark\"></span>\r\n                      </label>\r\n                      <label  className=\"check\"  for=\"technicalissues\"> <FontAwesomeIcon icon={checkIcon(\"Technical Issues\")} /> &nbsp;Technical Issues\r\n                        <input type=\"checkbox\" id=\"technicalissues\" name=\"technicalissues\" />\r\n                        <span class=\"checkmark\"></span>\r\n                      </label>\r\n                      <label  className=\"check\"  for=\"carpool\"> <FontAwesomeIcon icon={checkIcon(\"CarPool\")} /> &nbsp;Carpool\r\n                        <input type=\"checkbox\" id=\"carpool\" name=\"carpool\" />\r\n                        <span class=\"checkmark\"></span>\r\n                      </label>\r\n                      <div className=\"btn2\">\r\n                        <button  > Submit &nbsp;<FontAwesomeIcon icon={faCircleCheck} /> </button>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </React.Fragment>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default Profile;   \r\n      \r\n      \r\n  \r\n  \r\n  \r\n   ","C:\\Users\\Cirruslabs\\Downloads\\clconnect\\clconnect\\client\\src\\components\\upload.js",["139","140","141","142"],"import React from 'react';\r\nimport { useState } from 'react';\r\nimport { ToastContainer} from \"react-toastify\";\r\nimport \"react-toastify/dist/react-toastify.esm\";\r\nimport '../components/reg.css';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSmile,faFile, faUserPlus } from \"@fortawesome/free-solid-svg-icons\";\r\n//function for upload file\r\nconst Upload = () => {\r\n    const[file, setfile] = useState('');\r\n  function rename(file)\r\n  {\r\n    const i= Number;\r\n    const addZero = (i) => \r\n    {\r\n      if (i < 10) \r\n      { i = \"0\" + i; }\r\n      return i;\r\n    };\r\n    //for renaming uploaded file to current date & time\r\n    let originalFileFrgs = file.split(\".\");\r\n    const today = new Date();\r\n    const fullYear = today.getFullYear();\r\n    const month = parseInt((today.getMonth()))+1;\r\n    const day = addZero(today.getDate());\r\n    const Hours = today.getHours();\r\n    const Mins = today.getMinutes();\r\n    let fileSuffix = [day]+\"-\"+[month]+\"-\"+[fullYear].join(\"\")+ \"-\"+[Hours]+ \"-\" +[Mins].join(\"\");\r\n    \r\n    console.log(fileSuffix);\r\n    originalFileFrgs[0] = originalFileFrgs[0]  + fileSuffix;\r\n    let filename = originalFileFrgs.join(\".\");\r\n\r\n    return (filename);\r\n  }\r\n  console.log(rename(file));\r\n    return (      \r\n      <React.Fragment>\r\n        <ToastContainer />       \r\n        <div className=\"contain2\">\r\n          <div className=\"card1\">\r\n            <div className=\"form1\">\r\n              <div className=\"leftside\">\r\n                { <img src={'http://localhost:3000/s8.png'} alt={\"not found\"}/>  }\r\n                \r\n              </div> \r\n              <div className=\"rightside\" style={{height:\"unset\"}}>\r\n             <h2 style={{marginLeft:\"70px\"}}> <FontAwesomeIcon icon={faFile} /> &nbsp; File Uplaod </h2> <br/>\r\n                <form method=\"POST\" action=\"http://localhost:4000/upload\" encType=\"multipart/form-data\" >\r\n                  <input type=\"file\" name=\"file123\"style={{marginTop:\"50px\", marginLeft:\"70px\"}} ></input>\r\n                  <input type=\"submit\" className=\"btn1 btn-primary \" style={{marginTop:\"50px\", marginLeft:\"140px\"}}></input>\r\n                </form>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>      \r\n      </React.Fragment>\r\n        \r\n        \r\n    );\r\n};\r\nexport default Upload;",{"ruleId":"143","replacedBy":"144"},{"ruleId":"145","replacedBy":"146"},{"ruleId":"147","severity":1,"message":"148","line":20,"column":1,"nodeType":"149","endLine":25,"endColumn":3},{"ruleId":"150","severity":1,"message":"151","line":1,"column":8,"nodeType":"152","messageId":"153","endLine":1,"endColumn":13},{"ruleId":"154","severity":1,"message":"155","line":112,"column":11,"nodeType":"156","messageId":"157","endLine":117,"endColumn":12},{"ruleId":"150","severity":1,"message":"158","line":66,"column":19,"nodeType":"152","messageId":"153","endLine":66,"endColumn":23},{"ruleId":"150","severity":1,"message":"159","line":85,"column":13,"nodeType":"152","messageId":"153","endLine":85,"endColumn":24},{"ruleId":"150","severity":1,"message":"160","line":86,"column":13,"nodeType":"152","messageId":"153","endLine":86,"endColumn":26},{"ruleId":"150","severity":1,"message":"161","line":148,"column":15,"nodeType":"152","messageId":"153","endLine":148,"endColumn":19},{"ruleId":"150","severity":1,"message":"162","line":148,"column":21,"nodeType":"152","messageId":"153","endLine":148,"endColumn":26},{"ruleId":"150","severity":1,"message":"163","line":148,"column":28,"nodeType":"152","messageId":"153","endLine":148,"endColumn":35},{"ruleId":"164","severity":1,"message":"165","line":19,"column":13,"nodeType":"166","endLine":19,"endColumn":73},{"ruleId":"150","severity":1,"message":"167","line":25,"column":21,"nodeType":"152","messageId":"153","endLine":25,"endColumn":26},{"ruleId":"150","severity":1,"message":"168","line":21,"column":15,"nodeType":"152","messageId":"153","endLine":21,"endColumn":22},{"ruleId":"150","severity":1,"message":"169","line":24,"column":11,"nodeType":"152","messageId":"153","endLine":24,"endColumn":12},{"ruleId":"150","severity":1,"message":"170","line":7,"column":10,"nodeType":"152","messageId":"153","endLine":7,"endColumn":17},{"ruleId":"150","severity":1,"message":"171","line":7,"column":26,"nodeType":"152","messageId":"153","endLine":7,"endColumn":36},{"ruleId":"150","severity":1,"message":"168","line":10,"column":17,"nodeType":"152","messageId":"153","endLine":10,"endColumn":24},{"ruleId":"150","severity":1,"message":"169","line":13,"column":11,"nodeType":"152","messageId":"153","endLine":13,"endColumn":12},"no-native-reassign",["172"],"no-negated-in-lhs",["173"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'post' is assigned a value but never used.","'replies_old' is assigned a value but never used.","'reply_updated' is assigned a value but never used.","'name' is assigned a value but never used.","'email' is assigned a value but never used.","'message' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'reply' is assigned a value but never used.","'setfile' is assigned a value but never used.","'i' is assigned a value but never used.","'faSmile' is defined but never used.","'faUserPlus' is defined but never used.","no-global-assign","no-unsafe-negation"]