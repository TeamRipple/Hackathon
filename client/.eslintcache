[{"D:\\clconnect\\client\\src\\index.js":"1","D:\\clconnect\\client\\src\\App.js":"2","D:\\clconnect\\client\\src\\reportWebVitals.js":"3","D:\\clconnect\\client\\src\\services\\httpService.js":"4","D:\\clconnect\\client\\src\\components\\upload.js":"5","D:\\clconnect\\client\\src\\components\\not-found.jsx":"6","D:\\clconnect\\client\\src\\components\\dashboard.jsx":"7","D:\\clconnect\\client\\src\\components\\createpost.jsx":"8","D:\\clconnect\\client\\src\\components\\logout.jsx":"9","D:\\clconnect\\client\\src\\components\\log.jsx":"10","D:\\clconnect\\client\\src\\components\\navbar.jsx":"11","D:\\clconnect\\client\\src\\components\\register.jsx":"12","D:\\clconnect\\client\\src\\components\\profile.jsx":"13","D:\\clconnect\\client\\src\\components\\Contactform.jsx":"14","D:\\clconnect\\client\\src\\components\\PostPage.jsx":"15","D:\\clconnect\\client\\src\\components\\common\\jumbotron.jsx":"16","D:\\clconnect\\client\\src\\components\\common\\protectedRoute.jsx":"17","D:\\clconnect\\client\\src\\services\\postCreateService.js":"18","D:\\clconnect\\client\\src\\services\\authService.js":"19","D:\\clconnect\\client\\src\\services\\userService.js":"20","D:\\clconnect\\client\\src\\utils\\paginate.js":"21","D:\\clconnect\\client\\src\\components\\common\\input.jsx":"22","D:\\clconnect\\client\\src\\components\\common\\pagination.jsx":"23","D:\\clconnect\\client\\src\\components\\listgroup.jsx":"24","D:\\clconnect\\client\\src\\components\\posts.jsx":"25","D:\\clconnect\\client\\src\\components\\common\\form.jsx":"26","D:\\clconnect\\client\\src\\components\\createReply.jsx":"27","D:\\clconnect\\client\\src\\services\\replyCreateService.js":"28"},{"size":956,"mtime":1660740166589,"results":"29","hashOfConfig":"30"},{"size":2542,"mtime":1660740166546,"results":"31","hashOfConfig":"30"},{"size":404,"mtime":1660740166606,"results":"32","hashOfConfig":"30"},{"size":641,"mtime":1660740167000,"results":"33","hashOfConfig":"30"},{"size":2297,"mtime":1662553455694,"results":"34","hashOfConfig":"30"},{"size":743,"mtime":1660740166777,"results":"35","hashOfConfig":"30"},{"size":6708,"mtime":1662551628963,"results":"36","hashOfConfig":"30"},{"size":4772,"mtime":1660740166676,"results":"37","hashOfConfig":"30"},{"size":370,"mtime":1660740166762,"results":"38","hashOfConfig":"30"},{"size":3635,"mtime":1662553140277,"results":"39","hashOfConfig":"30"},{"size":4502,"mtime":1660740166762,"results":"40","hashOfConfig":"30"},{"size":4498,"mtime":1662553281572,"results":"41","hashOfConfig":"30"},{"size":5047,"mtime":1662553329997,"results":"42","hashOfConfig":"30"},{"size":9631,"mtime":1660740166654,"results":"43","hashOfConfig":"30"},{"size":5975,"mtime":1660740166793,"results":"44","hashOfConfig":"30"},{"size":691,"mtime":1662553504852,"results":"45","hashOfConfig":"30"},{"size":612,"mtime":1660740166984,"results":"46","hashOfConfig":"30"},{"size":280,"mtime":1660740167031,"results":"47","hashOfConfig":"30"},{"size":257,"mtime":1660740167000,"results":"48","hashOfConfig":"30"},{"size":315,"mtime":1660740167069,"results":"49","hashOfConfig":"30"},{"size":229,"mtime":1660740167086,"results":"50","hashOfConfig":"30"},{"size":518,"mtime":1660740166937,"results":"51","hashOfConfig":"30"},{"size":1048,"mtime":1660740166961,"results":"52","hashOfConfig":"30"},{"size":1275,"mtime":1660740166724,"results":"53","hashOfConfig":"30"},{"size":1785,"mtime":1660740166808,"results":"54","hashOfConfig":"30"},{"size":1601,"mtime":1660740166921,"results":"55","hashOfConfig":"30"},{"size":2370,"mtime":1660740166692,"results":"56","hashOfConfig":"30"},{"size":273,"mtime":1660740167047,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"1wm5o1f",{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"60"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"60"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"60"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"60"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"60"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"60"},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"D:\\clconnect\\client\\src\\index.js",[],["121","122"],"D:\\clconnect\\client\\src\\App.js",[],"D:\\clconnect\\client\\src\\reportWebVitals.js",[],"D:\\clconnect\\client\\src\\services\\httpService.js",["123"],"import axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n//Error catching if any issue with backend calls\naxios.defaults.headers.common[\"x-auth-token\"] = localStorage.getItem(\"token\");\n\naxios.interceptors.response.use(null, (error) => {\n  const expectedError =\n    error.response &&\n    error.response.status >= 400 &&\n    error.response.status < 500;\n\n  if (!expectedError) {\n    toast(\"An unexpected error occured!\");\n  }\n  console.log(error);\n  return Promise.reject(error);\n});\n\nexport default {\n  get: axios.get,\n  post: axios.post,\n  put: axios.put,\n  delete: axios.delete,\n};\n","D:\\clconnect\\client\\src\\components\\upload.js",["124","125"],"D:\\clconnect\\client\\src\\components\\not-found.jsx",[],"D:\\clconnect\\client\\src\\components\\dashboard.jsx",[],"D:\\clconnect\\client\\src\\components\\createpost.jsx",[],"D:\\clconnect\\client\\src\\components\\logout.jsx",["126"],"import React from \"react\"; \nimport {Component } from \"react\";\n// class for logout functionality, disconnects token and redirect to dashboard\nclass Logout extends Component {\n  componentDidMount() {\n    localStorage.removeItem(\"token\");\n    //redirect to daschboard page\n    window.location = \"/dashboard\";\n  }\n  render() {\n    return null;\n  }\n}\n\nexport default Logout;\n","D:\\clconnect\\client\\src\\components\\log.jsx",[],"D:\\clconnect\\client\\src\\components\\navbar.jsx",[],"D:\\clconnect\\client\\src\\components\\register.jsx",[],"D:\\clconnect\\client\\src\\components\\profile.jsx",["127","128"],"D:\\clconnect\\client\\src\\components\\Contactform.jsx",["129","130","131"],"import React from \"react\";\r\nimport axios from 'axios';\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport '../components/ContactForm.css';\r\n//import for icons \r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {faEnvelope, faCheck, faReply } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass ContactForm extends React.Component {  \r\n\r\n  //this must be bound so that event handler function methods correctly update the overall component state.\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        name: '',\r\n        nameError: false,\r\n        subject: '',\r\n        contact: '',\r\n        email: '',\r\n        emailError: false,\r\n        emailError2: false,\r\n        message: '',\r\n        messageError: false,\r\n        formValid: false\r\n      };\r\n\r\n      //binding all the function to class using constructor so they can be used\r\n      this.handleBlur   = this.handleBlur.bind(this);\r\n      this.handleChange = this.handleChange.bind(this);\r\n      this.handleSubmit = this.handleSubmit.bind(this);\r\n      this.handleBlur1 = this.handleBlur1.bind(this);   \r\n  }\r\n    //Validating email for cirruslabs.io useing regex\r\n    isValidEmail(email) {\r\n      return /^[_A-Za-z0-9-\\\\+]+(\\\\.[_A-Za-z0-9-]+)*@cirruslabs.io$/.test(email);\r\n    }\r\n    \r\n    \r\n    \r\n    //Focusing on Name field\r\n    handleBlur(e) {\r\n     \r\n      const name = e.target.name; \r\n      const value = e.target.value;\r\n  \r\n      this.setState({ [name]: value  });\r\n  \r\n      if (value.length <= 0 && (name === 'name')) {\r\n        this.setState({ nameError: true });\r\n        toast.error('Name Error')        \r\n      } \r\n      else {\r\n        this.setState({ nameError: false });\r\n      }\r\n    }\r\n\r\n     //Focusing on Email field\r\n    handleBlur1(e) {\r\n     \r\n      const name1 = e.target.name; \r\n      const value1 = e.target.value;\r\n  \r\n      this.setState({ [name1]: value1  });\r\n  \r\n      \r\n  \r\n      if (value1.length <= 0 && (name1 === 'email')) {\r\n          this.setState({ emailError: true });\r\n          this.setState({ emailError2: false });\r\n          toast.error('Email Error')\r\n      } \r\n      else {\r\n          this.setState({ emailError: false });\r\n          if(this.isValidEmail(value1)) {\r\n            this.setState({ emailError2: false });  \r\n          } \r\n          else \r\n          {\r\n          this.setState({ emailError2: true });  \r\n          toast.error('Invalid Email')\r\n          }\r\n        } \r\n  \r\n    }\r\n    \r\n    //triggered only when we change and focus out of the text input.\r\n    handleChange(e) \r\n    {\r\n      this.setState({ [e.target.name]: e.target.value  });\r\n    }\r\n  \r\n    //submits all the field values of the form and gets the current value of state. \r\n    //It adds it to the array of webhooks and performs validation calls . \r\n    handleSubmit(e) \r\n    {\r\n      const { name, email, message, nameError, emailError, emailError2, messageError, subject, contact } = this.state;\r\n      \r\n      this.setState({ nameError: name ? false : true });\r\n      this.setState({ messageError: message ? false : true });\r\n      this.setState({ emailError: email ? false : true });\r\n      if (email && !emailError) \r\n      { this.setState({ emailError2: this.isValidEmail(email) ? false : true });  }\r\n      \r\n  \r\n      if (name && email && message && !nameError && !emailError && !emailError2 && !messageError) \r\n      {\r\n        this.setState({ formValid: true }); \r\n\r\n          var toemail=\"pranjal@cirruslabs.io\"\r\n          var eemail=\"pranjal.kul10@gmail.com\"\r\n          \r\n          let data = {\r\n              name,\r\n              email,\r\n              subject,\r\n              contact,\r\n              message,\r\n              toemail,\r\n              eemail\r\n              \r\n          }\r\n      \r\n          //sending the contact form details to admin via mail   \r\n          axios.post(\"http://localhost:4000/mailer\",data)\r\n          .then(res=>{\r\n              this.setState({\r\n                  sent:true,\r\n                },this.resetForm())\r\n            \r\n            }).catch(()=>{\r\n              console.log('msg sent successfully');\r\n              })\r\n            \r\n      } \r\n      else \r\n      {\r\n        this.setState({ formValid: false });\r\n      }\r\n\r\n      e.preventDefault();\r\n  }  \r\n    \r\n\r\n  //rendering event handler and submit functions \r\n    render() {  \r\n      \r\n      const { name, email, message, nameError, emailError, emailError2, messageError, formValid } = this.state;\r\n  \r\n      if(!formValid) {\r\n        \r\n        return (\r\n       \r\n              <div>\r\n                \r\n                <ToastContainer/>\r\n                <div className=\"body\">\r\n                  <div className=\"contain4\" style={{padding: \"10px 30px 10px 30px\", height: \"fit-content\", marginTop:\"100px\"}} >\r\n                    <div className=\"card3\" style={{padding: \"10px 30px 10px 30px\",height: \"fit-content\"}}>\r\n                      <div className=\"hello2\"style={{textAlign:\"center\"}} ><h2 style={{marginLeft:\"-120px\"}} > <FontAwesomeIcon icon={faEnvelope} /> Contact Form</h2>    </div>\r\n                        <div className=\"r1\"  >\r\n                          <form action=\"/\" onSubmit={(e) => this.handleSubmit(e)} encType=\"multipart/form-data\" autoComplete=\"on\">\r\n                            \r\n                            <div className=\"form-group1\" style={{margin: \"5px 30px 5px 30px\", width:\"90%\"}}>\r\n                              <label className=\"lab\" >Your name<span className=\"text-danger\">*</span></label>\r\n                              <input name=\"name\"  type=\"text\" className=\"form-control\" placeholder=\"Name\" value={this.state.name} onChange={this.handleChange} onBlur={this.handleBlur} />\r\n                              { nameError\r\n                                ? <div className=\"alert \">Name is a required field.</div>\r\n                                : ''\r\n                              }\r\n                            </div>\r\n\r\n                            <div className=\"form-group1\" style={{margin: \"5px 30px 5px 30px\", width:\"90%\"}}>\r\n                              <label className=\"lab\" >Your email<span className=\"text-danger\">*</span></label>\r\n                              <input name=\"email\"  type=\"email\" className=\"form-control\" placeholder=\"Email\" value={this.state.email} onChange={this.handleChange} onBlur={this.handleBlur1} />\r\n                              { emailError\r\n                                ? <div className=\"alert \">Email is a required field.</div>\r\n                                : ''\r\n                              }\r\n                              { emailError2\r\n                                ? <div className=\"alert \">Email invalid.</div>\r\n                                : ''\r\n                              }\r\n                            </div>\r\n\r\n                            <div className=\"form-group1\" style={{margin: \"5px 30px 5px 30px\", width:\"90%\"}}>\r\n                              <label className=\"lab\">Subject<span className=\"text-danger\"></span></label>\r\n                              <input name=\"subject\"  type=\"text\" className=\"form-control\" placeholder=\"Subject\" onChange={this.handleChange} value={this.state.subject}  />\r\n                            </div>\r\n\r\n                            <div className=\"form-group1\" style={{margin: \"5px 30px 5px 30px\", width:\"90%\"}}>\r\n                              <label className=\"lab\" >Your contact number (Optional)</label>\r\n                              <input name=\"contact\"  type=\"text\" className=\"form-control\" placeholder=\"Contact\" onChange={this.handleChange} value={this.state.contact}  />\r\n                            </div>\r\n\r\n                            <div className=\"form-group1\" style={{margin: \"5px 30px 5px 30px\", width:\"90%\"}}>\r\n                              <label className=\"lab\" >Let us know how can we help<span className=\"text-danger\">*</span></label>\r\n                              <textarea name=\"message\" style={{borderRadius: \"10px\", border:\"1px solid rgb(43, 40, 40)\" }}  type=\"text\" className=\"form-control\" placeholder=\"Message\" value={this.state.message} onChange={this.handleChange} onBlur={this.handleBlur} />\r\n                              { messageError\r\n                                ? <div className=\"alert \">Message is a required field.</div>\r\n                                : ''\r\n                              }\r\n                            </div>\r\n                    \r\n                            <div className=\"text-center\">\r\n                              <button className=\"btn btn-primary m-3\">\r\n                                <FontAwesomeIcon icon={faCheck} /> Submit\r\n                              </button>\r\n                            </div>                 \r\n                          </form>       \r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              );\r\n      }\r\n      else {\r\n         return (\r\n          // Display after successful submission\r\n           <div className=\"thankyou_details\">\r\n              <ToastContainer/>\r\n                <div className=\"alert alert-success mt-3\" style={{textAlign:\"center\", backgroundColor:\"#ffffff91\"}}>\r\n                  <h2>Thank you for contacting us</h2>\r\n                  <h2> We will get in touch with you. 🧑‍💻</h2>\r\n                  <Link to= \"/dashboard\" class=\"btn btn-link\">\r\n                  <h2 > <FontAwesomeIcon icon={faReply} /> &nbsp; Back to Dashboard </h2>\r\n                  </Link>\r\n                </div>\r\n          </div>\r\n          )\r\n        }\r\n    }\r\n  }  \r\n\r\n  export default ContactForm;","D:\\clconnect\\client\\src\\components\\PostPage.jsx",["132","133","134"],"import React, { Component } from \"react\";\nimport Moment from \"react-moment\";\nimport \"moment-timezone\";\nimport { PersonCircle, HandThumbsUpFill, } from \"react-bootstrap-icons\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport http from \"../services/httpService\";\nimport { postEndPoint, repliesEndPoint } from \"../config.json\";\nimport PostReply from \"./createReply\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faClockRotateLeft, faFlag, } from \"@fortawesome/free-solid-svg-icons\";\n\n//Class for Postpage when post link is clicked\nclass PostPage extends Component \n{\n  //state variables of the particular post\n  state = \n  {\n    post: {\n      description: \"\",\n      title: \"\",\n      tags: [],\n      author: [],\n      upvotes: [],\n      views: 0,\n    },\n    replies: [],\n  };\n  //call to backend for retrieving data\n  async componentDidMount() \n  {\n    const id = this.props.match.params.id;\n    const { data: post } = await http.get(postEndPoint + \"/\" + id);\n    const { data: replies } = await http.get(repliesEndPoint + \"/\" + id);\n    this.setState({ post: post, replies: replies });\n  }\n  //function to check the no. of likes to post \n  checkLike() \n  {\n    const { user } = this.props;\n    const { post } = this.state;\n    //console.log(user);\n    if (user && post.upvotes && post.upvotes.includes(user._id)) return true;\n    else return false;\n  }\n  //function to check the no. of likes to replies \n  checkReplyLike(id) \n  {\n    const { replies } = this.state;\n    const { user } = this.props;\n    if(user) \n    {\n      for (let i in replies) \n      {\n        if (replies[i]._id === id) \n        {\n          if (replies[i].upvotes.includes(user._id)) return true;\n        }\n      }\n    }\n    return false;\n  }\n  //function to handle likes to posts\n  handleUpvote = async () => \n  {\n    const id = this.props.match.params.id;\n    const { data: post } = await http.get(postEndPoint + \"/\" + id);\n    try {\n      const { data: post } = await http.put(\n        postEndPoint + \"like/\" + this.props.match.params.id,\n        {}\n      );\n      console.log(post);\n      this.setState({ post: post[0] });\n    } catch (ex) {\n      if (ex.response && ex.response.status === 400) {\n        toast.error(\"You can't upvote your own post!\");\n      }\n    }\n  };\n  \n  //function to handle likes to reply \n  handleReplyUpvote = async (id) => \n  {\n    try {\n      const replies_old = [...this.state.replies];\n      const reply_updated = await http.put(repliesEndPoint + \"like/\" + id, {});\n      const { data: replies } = await http.get(\n        repliesEndPoint + \"/\" + this.props.match.params.id\n      );\n      console.log(replies);\n      this.setState({ replies: replies });\n    } catch (ex) {\n      if (ex.response && ex.response.status === 400) {\n        toast.error(\"You can't upvote your own reply!\");\n      }\n    }\n  };\n\n  render() {\n    const { post, replies } = this.state;\n    const { user } = this.props;\n    return (\n      <div>\n        <ToastContainer />\n        <div className=\"container col-lg-6 shadow-lg p-3 mt-5 bg-body rounded\">\n          <h2><FontAwesomeIcon icon={faFlag}/> {post.title}</h2>\n          <p className=\"mt-4\" style={{ color: \"#505050\" }}>\n            {post.description}\n          </p>\n          <div className=\"mt-1\">\n            Related Topics:\n            {post.tags &&\n              post.tags.map((tag) => (\n                <span className=\"badge badge-success m-1 p-2\">{tag.name}</span>\n            ))}\n            <div className=\"d-flex w-100 justify-content-between mt-3 mb-3\">\n              <button\n                disabled={!user}\n                className={\n                  this.checkLike()\n                    ? \"btn btn-primary\"\n                    : \"btn btn-outline-primary\"\n                }\n                onClick={this.handleUpvote}\n              >\n                <HandThumbsUpFill className=\"mr-2\" />\n                {(post.upvotes && post.upvotes.length) || 0}\n              </button>\n              <p>{post.views} Views</p>\n            </div>\n            <div class=\"d-flex w-100 justify-content-between\" style={{ color: \"#505050\" }}>\n              <div>\n                <PersonCircle size={30} className=\"mr-2\" />\n                Posted by {(post.author && post.author.username) || 0}\n              </div>\n              <p class=\"mb-1\">\n              <FontAwesomeIcon icon={faClockRotateLeft}/> <Moment fromNow>{post.time}</Moment>\n              </p>\n            </div>\n          </div>\n        </div>\n        {user && <PostReply id={this.props.match.params.id} />}\n        <div className=\"container col-lg-6 shadow-lg p-3 mt-5 bg-body rounded\">\n          Showing {replies.length} replies\n        </div>\n        <div>\n          {replies &&\n            replies.map((reply) => (\n              <div className=\"container col-lg-6 shadow-lg p-3 mt-3 bg-body rounded\">\n                <div className=\"ml-4\">\n                  <PersonCircle size={30} className=\"mr-3\" />\n                  Posted by {reply.author.username}\n                </div>\n                <div className=\"m-4\">{reply.comment}</div>\n                <div className=\"d-flex w-100 justify-content-between mt-3 mb-3\">\n                  <button\n                    className={\n                      this.checkReplyLike(reply._id)\n                        ? \"btn btn-primary\"\n                        : \"btn btn-outline-primary\"\n                    }\n                    disabled={!user}\n                    onClick={() => {this.handleReplyUpvote(reply._id);}}\n                  >\n                    <HandThumbsUpFill className=\"mr-2\" />\n                    {reply.upvotes.length}\n                  </button>\n                  <p class=\"mb-1\">\n                    <Moment fromNow style={{ color: \"#505050\" }}>\n                      {reply.time}\n                    </Moment>\n                  </p>\n                </div>\n              </div>\n           ))\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default PostPage;\n","D:\\clconnect\\client\\src\\components\\common\\jumbotron.jsx",[],"D:\\clconnect\\client\\src\\components\\common\\protectedRoute.jsx",[],"D:\\clconnect\\client\\src\\services\\postCreateService.js",[],"D:\\clconnect\\client\\src\\services\\authService.js",[],"D:\\clconnect\\client\\src\\services\\userService.js",[],"D:\\clconnect\\client\\src\\utils\\paginate.js",[],"D:\\clconnect\\client\\src\\components\\common\\input.jsx",[],"D:\\clconnect\\client\\src\\components\\common\\pagination.jsx",["135"],"import React from \"react\";\nimport propTypes from \"prop-types\";\nimport _ from \"lodash\";\n\n//Page No. links component to list all post or specific category post pagewise.... \nconst Pagination = (props) => {\n  const { itemCount, pageSize, currentPage, onPageChange } = props;\n  const pagesCount = Math.ceil(itemCount / pageSize);\n  if (pagesCount === 1) return null;\n  const pages = _.range(1, pagesCount + 1);\n  return (\n    <div className=\"text-center\" >\n      <ul className=\"pagination m-4\" >\n        {pages.map((page) => (\n          <li\n            key={page}\n            className={page === currentPage ? \"page-item active\" : \"page-item\"}\n          >\n            <a className=\"page-link\" onClick={() => onPageChange(page)}>\n              {page}\n            </a>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nPagination.propTypes = {\n  itemCount: propTypes.number.isRequired,\n  pageSize: propTypes.number.isRequired,\n  currentPage: propTypes.number.isRequired,\n  onPageChange: propTypes.func.isRequired,\n};\nexport default Pagination;\n","D:\\clconnect\\client\\src\\components\\listgroup.jsx",[],"D:\\clconnect\\client\\src\\components\\posts.jsx",[],"D:\\clconnect\\client\\src\\components\\common\\form.jsx",[],"D:\\clconnect\\client\\src\\components\\createReply.jsx",["136"],"import React from \"react\";\nimport Joi from \"joi-browser\";\nimport {ToastContainer } from \"react-toastify\";\nimport Form from \"./common/form\";\nimport { createreply } from \"../services/replyCreateService\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faComments, faReply } from \"@fortawesome/free-solid-svg-icons\";\n\nclass PostReply extends Form {\n  // creating state variables for data and errors  for replies to post\n  state = {\n    data: {\n      comment: \"\",\n    },\n    errors: { comment: \"\" },\n  };\n  // calling replies schema for new post\n  schema = { \n    comment: Joi.string().required().min(5).label(\"Comment\"),\n  };\n // Handling Submit for replies\n  doSubmit = async () => {\n    try {\n      const { data } = this.state;\n      const { data: reply } = await createreply(data, this.props.id);\n      window.location = `/post/${this.props.id}`;\n    } catch (ex) {}\n  };\n\n  render() {\n    const { data, errors } = this.state;\n    return (\n      <React.Fragment>\n        <ToastContainer />\n          <div className=\"container col-lg-6 shadow-lg p-3 mt-5 bg-body rounded\">\n              <form onSubmit={this.handleSubmit}>\n                  <div className=\"form-group\">\n                      <label htmlFor=\"description\"> <FontAwesomeIcon icon={faComments} /> Post Reply</label>\n                      <textarea\n                        className=\"border border-primary\"\n                        style={{ height: 150 }}\n                        value={data.comment}\n                        onChange={this.handleChange}\n                        name=\"comment\"\n                        type=\"comment\"\n                        id=\"comment\"\n                        class=\"form-control\"\n                      />\n                        {errors.description && (\n                          <div className=\"alert-info\">{errors.description}</div>\n                        )}\n                      <div className=\"text-center\">\n                        <button\n                          className=\"btn btn-primary mt-4\"\n                          disabled={this.validate()}\n                        >\n                          Post Reply <FontAwesomeIcon icon={faReply} />\n                        </button>\n                      </div>\n                  </div>\n               </form>\n           </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default PostReply;\n","D:\\clconnect\\client\\src\\services\\replyCreateService.js",[],{"ruleId":"137","replacedBy":"138"},{"ruleId":"139","replacedBy":"140"},{"ruleId":"141","severity":1,"message":"142","line":20,"column":1,"nodeType":"143","endLine":25,"endColumn":3},{"ruleId":"144","severity":1,"message":"145","line":11,"column":17,"nodeType":"146","messageId":"147","endLine":11,"endColumn":24},{"ruleId":"144","severity":1,"message":"148","line":14,"column":11,"nodeType":"146","messageId":"147","endLine":14,"endColumn":12},{"ruleId":"144","severity":1,"message":"149","line":1,"column":8,"nodeType":"146","messageId":"147","endLine":1,"endColumn":13},{"ruleId":"144","severity":1,"message":"145","line":21,"column":15,"nodeType":"146","messageId":"147","endLine":21,"endColumn":22},{"ruleId":"144","severity":1,"message":"148","line":24,"column":11,"nodeType":"146","messageId":"147","endLine":24,"endColumn":12},{"ruleId":"144","severity":1,"message":"150","line":148,"column":15,"nodeType":"146","messageId":"147","endLine":148,"endColumn":19},{"ruleId":"144","severity":1,"message":"151","line":148,"column":21,"nodeType":"146","messageId":"147","endLine":148,"endColumn":26},{"ruleId":"144","severity":1,"message":"152","line":148,"column":28,"nodeType":"146","messageId":"147","endLine":148,"endColumn":35},{"ruleId":"144","severity":1,"message":"153","line":66,"column":19,"nodeType":"146","messageId":"147","endLine":66,"endColumn":23},{"ruleId":"144","severity":1,"message":"154","line":85,"column":13,"nodeType":"146","messageId":"147","endLine":85,"endColumn":24},{"ruleId":"144","severity":1,"message":"155","line":86,"column":13,"nodeType":"146","messageId":"147","endLine":86,"endColumn":26},{"ruleId":"156","severity":1,"message":"157","line":19,"column":13,"nodeType":"158","endLine":19,"endColumn":73},{"ruleId":"144","severity":1,"message":"159","line":25,"column":21,"nodeType":"146","messageId":"147","endLine":25,"endColumn":26},"no-native-reassign",["160"],"no-negated-in-lhs",["161"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-unused-vars","'setfile' is assigned a value but never used.","Identifier","unusedVar","'i' is assigned a value but never used.","'React' is defined but never used.","'name' is assigned a value but never used.","'email' is assigned a value but never used.","'message' is assigned a value but never used.","'post' is assigned a value but never used.","'replies_old' is assigned a value but never used.","'reply_updated' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'reply' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]